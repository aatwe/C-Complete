1) cppinsights.io
	precaution: logic inside function should be supported by whatever T data type will be
		for ex multiple(Ta, Tb) => trying to multiple 2 strings	//Compiler error
	
	Note: template is added to binary
2) Put the below code


#include <iostream>

template <typename T>
T maximum(Ta , Tb){
   return (a > b)? a : b;
}

int main() {
   int x{5};
   int y{7};
   int result = maximum(x,y);

  return 0;
}


3) Click play
4) if we change main() parameters to double, template instance will also change to double

Output:
#include <iostream>

template <typename T>
T maximum(Ta , Tb){
   return (a > b)? a : b;
}

#ifdef INSIGHTS_USE_TEMPLATE
template<>
int maximum<int>(int a, int b)	//int function//template instance generated by compiler	//template instances that are not needed, wont be generated
{
  return (a>b)? a : b;
}
#endif
int main() {
	
   int x{5};			
   int y{7};
   int result = maximum(x,y);

  return 0;
}



Q)

template <typename T>
T maximum(Ta , Tb){
   return (a > b)? a : b;
}
int main(){
   double x{5.5};
   double y{78.7};
   int result = maximum(x,y);	//implictly convert to int	//use auto if correct result needed -> compiler deduces from return type of instance
  std::cout<<result;
   return 0;
}
Output: 78