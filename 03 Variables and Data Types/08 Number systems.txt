Why Number system representations? to make sense of binary numbers in memory
How to transform binary digits (1s and 0s) -------->  human readable forms(22.38, Alex,,22 etc)?
Number system
define values for groups of numbers


What number systems do we know?
1) Decimal (base 10)
	Each digit in base 10 can have 10 states : 0-9 
What is base 10 representation of  2371? well 2371 is base 10

	2371 = 2x10^3 + 3x10^2 + 7x10^1 + 1x10^0


2) binary (base 2) ((0b indicates binary number))
	Each digit in binary can have 2 states : 0-1
What is base 2 binary representaiton of decimal number 37
 	1x2^5 + 0x2^4 + 0x2^3 + 1x2^2 + 0x2^1 +1x2^0 = 100101 
How to transform using binary number system?
	a ) Form groups for ex of 3 (group = size of data)
	and then calculate decimal value for each group
	011, 001, 110....	//group of size 3
	//3   1      6	//meaning of data
	b ) Groups of 4
	0000, 0001, 0010    //group of size 4
	// 0     1       2	//meaning of data

How to find which group size to use?

  (binary)		(decimal)
1 digit binary -> data range is 0-1
2 digit binary -> data range is 0-3
3 digit binary -> data range is 0-7
4 digit binary -> data range is 0-15
...
8 digit binary -> data range is 0-255
   //1 bytes
16 digit binary -> data range is 0-65,535
   //2 bytes
n digit binary -> data range is 0-2^n -1

3) octal (not widely used today) (base 8)
	Each digit in octal/base 8 can have 8 states : 0-7 

(Binary) 	(oct)
000 ->    0
001 ->    1
010 ->    2
011 ->    3
100 ->    4
101 ->    5
110 ->    6
111 ->	7
How to represent binary in octal?(0 indicates octal number)
0100111111 (binary)  -> 0477

0	100	111	111
0	 4	 7	 7   -> 0477


Why group of 3? each digit can have upto range upto 8 , i.e 8 states

4) hexadecimal (base 16)
	Each digit in hexa/base 16 can have 16 states : 0-9 +A,B,C,D,E,F
			(Why abcdef to 2 digit number into 1 digit number system)
Binary 	Hex
0000 ->    0
0001 ->    1
...
1001 ->    9
1010 ->    A
1011 ->    B
1100 ->    C

How to represent binary in hexadecimal (0x indicates hexadecimal number)
	Why group of 4? each digit can have upto range upto 16 , i.e 16 states
0x6E30F13F -> 
 
   6	E	3	0            F	1	  3	  F
0110    1110        0011       0000       1111       0001	0011	1111

What if groups of 4 not forming? form groups from left (Padding)
	for the not forming groups -> add missing bits
	1  0010  0100  1000  1010
         0001  0010  0100  1000  1010


How to force output to hex/ decimal/octal?

	std::dec, std::hex, std::oct	//does not work coz number systems dont work  for floating point numbers
	int pos_int {717171}
	int neg_int{-47347}
	double double_var {498.32};
//By default
	std::cout<<"post_int(dec) :" <<pos_int;			
	std::cout<<"post_int(hex) :" <<pos_int;			
	std::cout<<"post_int(oct) :" <<pos_int;			
//pos in different formats					//Works for positive number
	std::cout<<"post_int(dec) :" <<std::dec << pos_int;	//717171
	std::cout<<"post_int(hex) :" <<std::hex << pos_int;	//af173
	std::cout<<"post_int(oct) :" <<std::oct << pos_int;	//2570563 	
//neg in different formats					//Works for negative number
	std::cout<<"neg_int(dec) :" <<std::dec << neg_int;	//-47347
	std::cout<<"neg_int(hex) :" <<std::hex << neg_int;	//ffff470d
	std::cout<<"neg_int(oct) :" <<std::oct << neg_int;	//37777643415

//doubel in different formats					///Doesnt work, double/floating point dont work with number systems	
	std::cout<<"neg_int(dec) :" <<std::dec << neg_int;	//498.32
	std::cout<<"neg_int(hex) :" <<std::hex << neg_int;	//498.32
	std::cout<<"neg_int(oct) :" <<std::oct << neg_int;	//498.32
