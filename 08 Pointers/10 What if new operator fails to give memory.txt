What if new operator fails to give you memory on heap
1)	Use exception (wrap in try and catch blocks)
	Exception thrown , program crashes
		why we use exception? to handle problems when they come
2)	use std::nothrow
1)  Use exceptions

int * lots_of_ints {new int {1000000000000}}


for(size_t i{} ; i< 1000000000000; ++i) {
  
  try {
	int *lots_of_ints3 {new int [100000]};
       } catch (std::exception& ex) {		//Find what problem happened from ex variable
	std::cout<<"Caught exception" <<ex.what() <<std::endl;
       }
   }
}

2) Use std::nothrow with new keyword

for (sizez_t i{}; i< 1000000000000; ++i ){
	int * lots_of_ints4 {new (std::nothrow) int[10000000]};	//use std::notthrow
				//What will it do?
				//System wont throw exception when operation fails
				//returns null ptr instead
	if(lots_of_ints4 == nullptr) {	//if pointer is null ptr
		std::cout<< "Memory allocation failed";
}else {
		std::cout<< "Memory allocation succeeded";
}
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Code:
1) grab template files and put in place




